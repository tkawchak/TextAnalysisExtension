variables:
  - name: NPM_VERSIONSPEC
    value: '12.x'
  - name: VM_IMAGE
    value: 'ubuntu-latest' # examples of other options: 'macOS-10.13', 'vs2017-win2016'
  - name: AZURE_SUBSCRIPTION
    value: "Visual Studio Enterprise (dfb55888-9a13-4ea3-b705-ddf6b0801b05)"
  - name: ProcessTextFunctionName
    value: 'ProcessTextFunc'
  - name: ProcessTextProjectPath
    value: '$(System.DefaultWorkingDirectory)/ProcessText'
  - name: ProcessTextFunctionPath
    value: '$(ProcessTextProjectPath)/$(ProcessTextFunctionAppName)'
  - name: BrowserExtensionPath
    value: '$(System.DefaultWorkingDirectory)/BrowserExtension'
  - name: TextExtractionFunctionName
    value: 'TextExtractionFunc'
  - name: TextExtractionFunctionPath
    value: '$(System.DefaultWorkingDirectory)/$(TextExtractionFunctionName)'
  - name: TextExtractionFunctionArtifactPath
    value: '$(Build.ArtifactStagingDirectory)/$(TextExtractionFunctionName)'
  - name: TextAnalysisFunctionName
    value: 'TextAnalysisFunc'
  - name: TextAnalysisFunctionPath
    value: '$(System.DefaultWorkingDirectory)/$(TextAnalysisFunctionName)'
  - name: TextAnalysisFunctionArtifactPath
    value: '$(Build.ArtifactStagingDirectory)/$(TextAnalysisFunctionName)'

trigger:
  batch: 'true'
  branches:
    include:
    - master
    - develop

pr:
  autoCancel: 'true'
  branches:
    include:
    - master

pool:
  name: 'Azure Pipelines'
  vmImage: '$(VM_IMAGE)'

stages:

  # Stage to build the Web Extension
  - stage: BuildWebExtension
    displayName: Build Web Extension
    dependsOn: []
    jobs:

    - job: BuildNpm
      displayName: Build Browser Extension
      dependsOn: []
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - task: NodeTool@0
        displayName: Download Node
        inputs:
          versionSpec: $(NPM_VERSIONSPEC)
      - task: Npm@1
        displayName: Install Npm Packages
        inputs:
          command: 'install'
          workingDir: $(BrowserExtensionPath)
      - task: Npm@1
        displayName: Package Extension Files
        inputs:
          command: 'custom'
          workingDir: $(BrowserExtensionPath)
          customCommand: 'run package'

    - job: TestNpm
      displayName: Browser Extension Tests
      dependsOn: BuildNpm
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - task: NodeTool@0
        displayName: Download Node
        inputs:
          versionSpec: $(NPM_VERSIONSPEC)
      - task: Npm@1
        displayName: Npm Tests
        inputs:
          command: 'custom'
          workingDir: $(BrowserExtensionPath)
          customCommand: 'run test'
    
    # Stage to build azure function projects
  - stage:  BuildFunctionProjects
    displayName: Build Azure Function Projects
    dependsOn: []
    jobs:

    - job: BuildAzureFunction
      displayName: Build Azure Function Projects
      dependsOn: []
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - task: DotNetCoreCLI@2
        displayName: Build Process Text Azure Functions
        inputs:
          command: 'build'
          projects: '$(AzureFunctionPath)/**/*.csproj'
          feedsToUse: 'select'
          versioningScheme: 'off'

    - job: TestAzureFunctions
      displayName: Unit Test Azure Function Projects
      dependsOn: BuildAzureFunction
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - task: DotNetCoreCLI@2
        displayName: Unit Test Process Text Functions
        inputs:
          command: 'test'
          projects: '$(AzureFunctionPath)/**/*.Tests.csproj'
          testRunTitle: 'Azure Function Tests'
          feedsToUse: 'select'
          versioningScheme: 'off'
          nobuild: true
      
      - task: PowerShell@2
        displayName: Unit Test Text Analytics Functions
        inputs:
          targetType: 'inline'
          script: |
            pip install -r requirements.txt
            pip install -r requirements_test.txt
            python -m unittest discover -s ./ -p "*_test.py" -v
          pwsh: true
          workingDirectory: '$(TextAnalysisFunctionPath)'

  # Prepare Azure Function code for Deployment and publish artifacts
  - stage: PrepareArtifacts
    displayName: Prepare Azure Function Artifacts
    dependsOn: BuildFunctionProjects
    jobs:

    - job: PublishProcessTextFunction
      displayName: Publish Process text Function
      dependsOn: []
      pool:
        vmImage: $(VM_IMAGE)
      steps:
      - task: DotNetCoreCLI@2
        displayName: Package Process text Function
        inputs:
          command: 'publish'
          projects: '$(ProcessTextFunctionPath)/*.csproj'
          arguments: '--output $(build.ArtifactStagingDirectory)/$(ProcessTextFunctionName)/$(Build.BuildId).zip --configuration Release'
          zipAfterPublish: true
          publishWebProjects: false
      - task: PublishBuildArtifacts@1
        displayName: Publish Process Text Function Artifacts
        inputs:
          ArtifactName: $(ProcessTextFunctionName)
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(ProcessTextFunctionName)/$(Build.BuildId).zip'
      
    - job: PublishExtractTextFunction
      displayName: Publish Extract Text Function
      dependsOn: []
      steps:
      - task: Npm@1
        displayName: Install npm packages
        inputs:
          command: 'install'
          workingDir: '$(TextExtractionFunctionPath)'
      - task: ArchiveFiles@2
        displayName: Package Text Extraction Function
        inputs:
          rootFolderOrFile: "$(TextExtractionFunctionPath)"
          includeRootFolder: false
          archiveFile: "$(TextExtractionFunctionArtifactPath)/$(Build.BuildId).zip"
      - task: PublishBuildArtifacts@1
        displayName: Publish Text Extraction Function Artifacts
        inputs:
          PathtoPublish: '$(TextExtractionFunctionArtifactPath)/$(Build.BuildId).zip'
          ArtifactName: $(TextExtractionFunctionName)

    - job: PublishTextAnalysisFunction
      displayName: Publish Text Analysis Function
      dependsOn: []
      steps:
        - task: PowerShell@2
          displayName: Pip install Requirements
          inputs:
            targetType: 'inline'
            pwsh: true
            workingDirectory: '$(TextAnalysisFunctionPath)'
            script: |
              pip install -r requirements.txt
        - task: ArchiveFiles@2
          displayName: Package Text Analysis Function
          inputs:
            rootFolderOrFile: "$(TextAnalysisFunctionPath)"
            includeRootFolder: false
            archiveFile: "$(TextAnalysisFunctionArtifactPath)/$(Build.BuildId).zip"
        - task: PublishBuildArtifacts@1
          displayName: Publish Text Analysis Function Artifacts
          inputs:
            PathtoPublish: '$(TextAnalysisFunctionArtifactPath)/$(Build.BuildId).zip'
            ArtifactName: $(TextAnalysisFunctionName)